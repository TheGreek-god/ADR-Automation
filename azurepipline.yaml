trigger: none

pool:
  name: my-pool-01  # Your Windows agent pool

variables:
#   bkstrgrg: asr-primary-dev
#   bkstrg: okekestorage
#   bkcontainer: tfstatefile
#   bkstrgkey: terraform.tfstate
  serviceConnection: terraform-conn   # <- Replace this with your Azure DevOps service connection name

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - script: choco install unzip -y
            displayName: 'Install unzip (Windows)'

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              # backendServiceArm: '$(serviceConnection)'
              # backendAzureRmResourceGroupName: '$(bkstrgrg)'
              # backendAzureRmStorageAccountName: '$(bkstrg)'
              # backendAzureRmContainerName: '$(bkcontainer)'
              # backendAzureRmKey: '$(bkstrgkey)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'

  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - script: choco install unzip -y
            displayName: 'Install unzip (Windows)'

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              # backendServiceArm: '$(serviceConnection)'
              # backendAzureRmResourceGroupName: '$(bkstrgrg)'
              # backendAzureRmStorageAccountName: '$(bkstrg)'
              # backendAzureRmContainerName: '$(bkcontainer)'
              # backendAzureRmKey: '$(bkstrgkey)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: '$(serviceConnection)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: '$(serviceConnection)'

  - stage: tfdestroy
    displayName: "Terraform Destroy"
    condition: false  # Change to true or automated if you want it to run automatically
    jobs:
      - job: destroy
        steps:
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV4@4
            displayName: "Terraform Init"
            inputs:
              provider: 'azurerm'
              command: 'init'
              # backendServiceArm: '$(serviceConnection)'
              # backendAzureRmResourceGroupName: '$(bkstrgrg)'
              # backendAzureRmStorageAccountName: '$(bkstrg)'
              # backendAzureRmContainerName: '$(bkcontainer)'
              # backendAzureRmKey: '$(bkstrgkey)'

          - task: TerraformTaskV4@4
            displayName: "Terraform Destroy"
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              environmentServiceNameAzureRM: '$(serviceConnection)'
