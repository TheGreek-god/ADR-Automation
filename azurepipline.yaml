trigger: none

pool:
  name: my-pool-01

variables:
  serviceConnection: terraform-conn

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - script: choco install unzip -y
            displayName: 'Install unzip (Windows)'

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          # Use Azure CLI for authentication (no backend involved)
          - task: AzureCLI@2
            displayName: 'Azure Login'
            inputs:
              azureSubscription: '$(serviceConnection)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Write-Host "Azure login successful - No backend configured"

          # Pure Terraform CLI commands - no backend
          - script: |
              terraform init
            displayName: 'Terraform Init (Local State Only)'

          - script: |
              terraform validate
            displayName: 'Terraform Validate'

  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - script: choco install unzip -y
            displayName: 'Install unzip (Windows)'

          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: 'latest'

          - task: AzureCLI@2
            displayName: 'Azure Login'
            inputs:
              azureSubscription: '$(serviceConnection)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Write-Host "Azure login successful - No backend configured"

          - script: |
              if exist ".terraform" rmdir /s /q ".terraform"
              terraform init
            displayName: 'Clean and Terraform Init (Local State Only)'

          - script: |
              terraform plan -out=tfplan
            displayName: 'Terraform Plan'

          - script: |
              terraform apply -auto-approve tfplan
            displayName: 'Terraform Apply'

  - stage: tfdestroy
    displayName: "Terraform Destroy"
    condition: false
    jobs:
      - job: destroy
        steps:
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: 'latest'

          - task: AzureCLI@2
            displayName: 'Azure Login'
            inputs:
              azureSubscription: '$(serviceConnection)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Write-Host "Azure login successful - No backend configured"

          - script: |
              if exist ".terraform" rmdir /s /q ".terraform"
              terraform init
            displayName: 'Clean and Terraform Init (Local State Only)'

          - script: |
              terraform destroy -auto-approve
            displayName: 'Terraform Destroy'